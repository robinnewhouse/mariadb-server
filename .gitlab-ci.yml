---

stages:
  - build
  - metrics-1
  - metrics-2
  - metrics-3
  - metrics-4

default:
  image: fedora:latest
  timeout: 3h

variables:
  CMAKE_FLAGS: "-DWITH_SSL=system -DPLUGIN_COLUMNSTORE=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_S3=NO -DPLUGIN_MROONGA=NO -DPLUGIN_CONNECT=NO -DPLUGIN_TOKUDB=NO -DWITH_WSREP=OFF"

mini-benchmark:
  stage: build
  allow_failure: true
  tags: 
    - benchmark
  variables:
    GIT_STRATEGY: fetch
    GIT_SUBMODULE_STRATEGY: normal
    PERF: --perf
  script:
    # Get mini-benchmark script
    - |
      if [ ! -f "$CI_PROJECT_DIR/support-files/mini-benchmark.sh" ]; then
        echo "Warning: mini-benchmark.sh not found, downloading from upstream repository."
        curl -o "$CI_PROJECT_DIR/support-files/mini-benchmark.sh" https://raw.githubusercontent.com/MariaDB/server/535711055643952df05774ddb0c94858101be5f6/support-files/mini-benchmark.sh
      fi
    # Temporary testing with git commit before submitting upstream PR
    - curl -o "$CI_PROJECT_DIR/support-files/mini-benchmark.sh" https://raw.githubusercontent.com/robinnewhouse/mariadb-server/fix-mini-benchmark/support-files/mini-benchmark.sh
    - chmod +x "$CI_PROJECT_DIR/support-files/mini-benchmark.sh"
    # Set up ccache
    - yum install -y ccache  # From EPEL
    - source /etc/profile.d/ccache.sh
    - export CCACHE_DIR="$(pwd)/.ccache"; ccache --zero-stats
    # Build and install
    - yum install -y yum-utils eatmydata
    - yum-builddep -y mariadb-server
    - mkdir builddir; cd builddir
    - cmake $CMAKE_FLAGS .. | tee -a ../build.log
    - eatmydata make install -j $(nproc --ignore=2) 2>&1 | tee -a ../build.log
    - export PATH=$PATH:/usr/local/mysql/bin/
    - ccache -s
    - cd $CI_PROJECT_DIR
    # Set up user and directory
    - groupadd mysql
    - useradd -r -g mysql -s /bin/false mysql
    - sudo mkdir -p /var/lib/mysql/
    - sudo chown -R mysql:mysql /var/lib/mysql/
    # Set the socket to where sysbench expects it
    - sed -i '/\[client-server\]/a socket=/var/lib/mysql/mysql.sock' /etc/my.cnf
    # Install server
    - /usr/local/mysql/scripts/mariadb-install-db --user mysql --datadir /var/lib/mysql
    # Start server
    - sudo -u mysql /usr/local/mysql/bin/mariadbd --datadir /var/lib/mysql & sleep 5
    - /usr/local/mysql/bin/mariadb-upgrade -u root
    # Run mini-benchmark
    - yum install -y sysbench procps-ng perf flamegraph flamegraph-stackcollapse-perf util-linux dnf-utils
    - $CI_PROJECT_DIR/support-files/mini-benchmark.sh $PERF
    - cp -av $CI_PROJECT_DIR/*/sysbench-run-*.log $CI_PROJECT_DIR/*/metrics.txt $CI_PROJECT_DIR  # Move files one level down so they can be saved as artifacts
  artifacts:
    when: always
    paths:
      - "$CI_PROJECT_DIR/*/sysbench-run-*.log"
    reports:
      metrics:
        - "$CI_PROJECT_DIR/*/metrics.txt"
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - .ccache

.check-cycles-script: &check-cycles-script
  - |
    cp -av $CI_PROJECT_DIR/mini-benchmark*/* $CI_PROJECT_DIR
    # Print performance counter summary if they were logged
    if grep --quiet cycles sysbench-run-*.log
    then
      grep -e cycles sysbench-run-*.log | sort -k 2
      echo "Total: $(grep -h -e cycles sysbench-run-*.log | sort -k 1 | awk '{s+=$1}END{print s}')"
      echo # Newline improves readability
      grep -e instructions sysbench-run-*.log | sort -k 2
      echo "Total: $(grep -h -e instructions sysbench-run-*.log | sort -k 1 | awk '{s+=$1}END{print s}')"
      echo # Newline improves readability

      CPU_CYCLE_LIMIT_LONG="${CPU_CYCLE_LIMIT}000000000"

      # Final verdict based on cpu cycle count
      RESULT="$(grep -h -e cycles sysbench-run-*.log | sort -k 1 | awk '{s+=$1}END{print s}')"
      if [ "$RESULT" -gt "$CPU_CYCLE_LIMIT_LONG" ]
      then
        echo # Newline improves readability
        echo "Benchmark exceeded the allowed limit of ${CPU_CYCLE_LIMIT} billion CPU cycles"
        echo "Performance most likely regressed!"
        exit 1
      fi
    fi

less-than-800B-cycles:
  stage: metrics-1
  dependencies: [mini-benchmark]
  needs: [mini-benchmark]
  variables:
    CPU_CYCLE_LIMIT: 1150
  script:
    *check-cycles-script

less-than-750B-cycles:
  stage: metrics-2
  dependencies: [mini-benchmark]
  needs: [mini-benchmark]
  variables:
    CPU_CYCLE_LIMIT: 1100
  script:
    *check-cycles-script

less-than-700B-cycles:
  stage: metrics-3
  dependencies: [mini-benchmark]
  needs: [mini-benchmark]
  variables:
    CPU_CYCLE_LIMIT: 1050
  script:
    *check-cycles-script

less-than-650B-cycles:
  stage: metrics-4
  dependencies: [mini-benchmark]
  needs: [mini-benchmark]
  variables:
    CPU_CYCLE_LIMIT: 1000
  script:
    *check-cycles-script